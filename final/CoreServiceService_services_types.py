################################################## 
# CoreServiceService_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://v4.core.coexprivate.api.shopatron.com
##############################

class ns0:
    targetNamespace = "http://v4.core.coexprivate.api.shopatron.com"

    class AssignmentResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "AssignmentResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AssignmentResponse_Def.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname=(ns,"FulfillerID"), aname="_FulfillerID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"FulfillerLocationID"), aname="_FulfillerLocationID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FulfillerID = None
                    self._FulfillerLocationID = None
                    return
            Holder.__name__ = "AssignmentResponse_Holder"
            self.pyclass = Holder

    class Bin_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "Bin")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Bin_Def.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname=(ns,"FulfillerID"), aname="_FulfillerID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"BinID"), aname="_BinID", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"FulfillerLocationID"), aname="_FulfillerLocationID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"BinType"), aname="_BinType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"BinStatus"), aname="_BinStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Name"), aname="_Name", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FulfillerID = None
                    self._BinID = None
                    self._FulfillerLocationID = None
                    self._BinType = None
                    self._BinStatus = None
                    self._Name = None
                    return
            Holder.__name__ = "Bin_Holder"
            self.pyclass = Holder

    class BinRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "BinRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.BinRequest_Def.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname=(ns,"FulfillerID"), aname="_FulfillerID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"FulfillerLocationID"), aname="_FulfillerLocationID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SearchTerm"), aname="_SearchTerm", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"NumResults"), aname="_NumResults", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"ResultsStart"), aname="_ResultsStart", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FulfillerID = None
                    self._FulfillerLocationID = None
                    self._SearchTerm = None
                    self._NumResults = None
                    self._ResultsStart = None
                    return
            Holder.__name__ = "BinRequest_Holder"
            self.pyclass = Holder

    class BinResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "BinResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.BinResponse_Def.schema
            TClist = [GTD("http://v4.core.coexprivate.api.shopatron.com","ArrayOf_impl_Bin",lazy=False)(pname=(ns,"Bins"), aname="_Bins", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"ResultCount"), aname="_ResultCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Bins = None
                    self._ResultCount = None
                    return
            Holder.__name__ = "BinResponse_Holder"
            self.pyclass = Holder

    class BinType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "BinType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.BinType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"BinType"), aname="_BinType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._BinType = None
                    return
            Holder.__name__ = "BinType_Holder"
            self.pyclass = Holder

    class BinStatus_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "BinStatus")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.BinStatus_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"BinStatus"), aname="_BinStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._BinStatus = None
                    return
            Holder.__name__ = "BinStatus_Holder"
            self.pyclass = Holder

    class FulfillerRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "FulfillerRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FulfillerRequest_Def.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname=(ns,"FulfillerID"), aname="_FulfillerID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Name"), aname="_Name", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FulfillerID = None
                    self._Name = None
                    return
            Holder.__name__ = "FulfillerRequest_Holder"
            self.pyclass = Holder

    class FulfillmentLocation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "FulfillmentLocation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FulfillmentLocation_Def.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname=(ns,"FulfillerID"), aname="_FulfillerID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"RetailerLocationID"), aname="_RetailerLocationID", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ExternalLocationID"), aname="_ExternalLocationID", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"LocationName"), aname="_LocationName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"LocationType"), aname="_LocationType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"Latitude"), aname="_Latitude", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"Longitude"), aname="_Longitude", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.Status_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CountryCode"), aname="_CountryCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FulfillerID = None
                    self._RetailerLocationID = None
                    self._ExternalLocationID = None
                    self._LocationName = None
                    self._LocationType = None
                    self._Latitude = None
                    self._Longitude = None
                    self._Status = None
                    self._CountryCode = None
                    return
            Holder.__name__ = "FulfillmentLocation_Holder"
            self.pyclass = Holder


        class Status_Dec(ZSI.TCnumbers.Iint, LocalElementDeclaration):
            literal = "Status"
            schema = "http://v4.core.coexprivate.api.shopatron.com"
            def __init__(self, **kw):
                kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","Status")
                kw["aname"] = "_Status"
                ZSI.TCnumbers.Iint.__init__(self, **kw)




    class FulfillmentLocationCatalog_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "FulfillmentLocationCatalog")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FulfillmentLocationCatalog_Def.schema
            TClist = [GTD("http://v4.core.coexprivate.api.shopatron.com","ManufacturerCatalog",lazy=False)(pname=(ns,"ManufacturerCatalog"), aname="_ManufacturerCatalog", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"FulfillerLocationID"), aname="_FulfillerLocationID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ManufacturerCatalog = None
                    self._FulfillerLocationID = None
                    return
            Holder.__name__ = "FulfillmentLocationCatalog_Holder"
            self.pyclass = Holder

    class FulfillmentLocationIdentifierType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "FulfillmentLocationIdentifierType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class FulfillmentLocationType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "FulfillmentLocationType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FulfillmentLocationType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"LocationType"), aname="_LocationType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._LocationType = None
                    return
            Holder.__name__ = "FulfillmentLocationType_Holder"
            self.pyclass = Holder

    class InventorySearchRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "InventorySearchRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.InventorySearchRequest_Def.schema
            TClist = [GTD("http://v4.core.coexprivate.api.shopatron.com","ArrayOf_xsd_FulfillerID",lazy=False)(pname=(ns,"FulfillerIDs"), aname="_FulfillerIDs", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"LocationID"), aname="_LocationID", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PostalCode"), aname="_PostalCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PartNumber"), aname="_PartNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"UPC"), aname="_UPC", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FulfillerIDs = None
                    self._LocationID = None
                    self._PostalCode = None
                    self._PartNumber = None
                    self._UPC = None
                    return
            Holder.__name__ = "InventorySearchRequest_Holder"
            self.pyclass = Holder

    class InventorySearchResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "InventorySearchResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.InventorySearchResponse_Def.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname=(ns,"FulfillerID"), aname="_FulfillerID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"FulfillerLocationID"), aname="_FulfillerLocationID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"LocationName"), aname="_LocationName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PartNumber"), aname="_PartNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"UPC"), aname="_UPC", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Available"), aname="_Available", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"OnHand"), aname="_OnHand", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Allocated"), aname="_Allocated", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"Distance"), aname="_Distance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FulfillerID = None
                    self._FulfillerLocationID = None
                    self._LocationName = None
                    self._PartNumber = None
                    self._UPC = None
                    self._Available = None
                    self._OnHand = None
                    self._Allocated = None
                    self._Distance = None
                    return
            Holder.__name__ = "InventorySearchResponse_Holder"
            self.pyclass = Holder

    class ItemQuantity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "ItemQuantity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ItemQuantity_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"PartNumber"), aname="_PartNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"UPC"), aname="_UPC", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Quantity"), aname="_Quantity", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._PartNumber = None
                    self._UPC = None
                    self._Quantity = None
                    return
            Holder.__name__ = "ItemQuantity_Holder"
            self.pyclass = Holder

    class ManufacturerCatalog_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "ManufacturerCatalog")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ManufacturerCatalog_Def.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname=(ns,"ManufacturerID"), aname="_ManufacturerID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"CatalogID"), aname="_CatalogID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ManufacturerID = None
                    self._CatalogID = None
                    return
            Holder.__name__ = "ManufacturerCatalog_Holder"
            self.pyclass = Holder

    class OrderRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "OrderRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.OrderRequest_Def.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname=(ns,"FulfillerID"), aname="_FulfillerID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://v4.core.coexprivate.api.shopatron.com","ManufacturerCatalog",lazy=False)(pname=(ns,"Catalog"), aname="_Catalog", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://v4.core.coexprivate.api.shopatron.com","RequestLocation",lazy=False)(pname=(ns,"Location"), aname="_Location", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"MaxLocations"), aname="_MaxLocations", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FulfillerID = None
                    self._Catalog = None
                    self._Location = None
                    self._MaxLocations = None
                    return
            Holder.__name__ = "OrderRequest_Holder"
            self.pyclass = Holder

    class RequestLocation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "RequestLocation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RequestLocation_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Unit"), aname="_Unit", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"Radius"), aname="_Radius", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PostalCode"), aname="_PostalCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"Latitude"), aname="_Latitude", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"Longitude"), aname="_Longitude", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CountryCode"), aname="_CountryCode", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Unit = None
                    self._Radius = None
                    self._PostalCode = None
                    self._Latitude = None
                    self._Longitude = None
                    self._CountryCode = None
                    return
            Holder.__name__ = "RequestLocation_Holder"
            self.pyclass = Holder

    class UpdateItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "UpdateItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.UpdateItem_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"PartNumber"), aname="_PartNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"UPC"), aname="_UPC", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Quantity"), aname="_Quantity", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"OrderID"), aname="_OrderID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"OrderItemID"), aname="_OrderItemID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"ShipmentID"), aname="_ShipmentID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"FulfillerLocationID"), aname="_FulfillerLocationID", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._PartNumber = None
                    self._UPC = None
                    self._Quantity = None
                    self._OrderID = None
                    self._OrderItemID = None
                    self._ShipmentID = None
                    self._FulfillerLocationID = None
                    return
            Holder.__name__ = "UpdateItem_Holder"
            self.pyclass = Holder

    class UpdateRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "UpdateRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.UpdateRequest_Def.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname=(ns,"FulfillerID"), aname="_FulfillerID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://v4.core.coexprivate.api.shopatron.com","FulfillmentLocationCatalog",lazy=False)(pname=(ns,"FulfillerLocationCatalog"), aname="_FulfillerLocationCatalog", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://v4.core.coexprivate.api.shopatron.com","ArrayOf_impl_UpdateItem",lazy=False)(pname=(ns,"Items"), aname="_Items", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FulfillerID = None
                    self._FulfillerLocationCatalog = None
                    self._Items = None
                    return
            Holder.__name__ = "UpdateRequest_Holder"
            self.pyclass = Holder

    class RefreshRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "RefreshRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RefreshRequest_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"LocationName"), aname="_LocationName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://v4.core.coexprivate.api.shopatron.com","ArrayOf_impl_RefreshItem",lazy=False)(pname=(ns,"Items"), aname="_Items", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._LocationName = None
                    self._Items = None
                    return
            Holder.__name__ = "RefreshRequest_Holder"
            self.pyclass = Holder

    class RefreshItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "RefreshItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RefreshItem_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"PartNumber"), aname="_PartNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"UPC"), aname="_UPC", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"BinID"), aname="_BinID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Quantity"), aname="_Quantity", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"LTD"), aname="_LTD", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"SafetyStock"), aname="_SafetyStock", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._PartNumber = None
                    self._UPC = None
                    self._BinID = None
                    self._Quantity = None
                    self._LTD = None
                    self._SafetyStock = None
                    return
            Holder.__name__ = "RefreshItem_Holder"
            self.pyclass = Holder

    class InventoryRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "InventoryRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.InventoryRequest_Def.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname=(ns,"FulfillerID"), aname="_FulfillerID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://v4.core.coexprivate.api.shopatron.com","ManufacturerCatalog",lazy=False)(pname=(ns,"Catalog"), aname="_Catalog", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://v4.core.coexprivate.api.shopatron.com","ArrayOf_impl_ItemQuantity",lazy=False)(pname=(ns,"Quantities"), aname="_Quantities", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://v4.core.coexprivate.api.shopatron.com","ArrayOfLocationNames",lazy=False)(pname=(ns,"LocationNames"), aname="_LocationNames", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://v4.core.coexprivate.api.shopatron.com","RequestLocation",lazy=False)(pname=(ns,"Location"), aname="_Location", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://v4.core.coexprivate.api.shopatron.com","InventoryRequestType",lazy=False)(pname=(ns,"Type"), aname="_Type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Limit"), aname="_Limit", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IgnoreSafetyStock"), aname="_IgnoreSafetyStock", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IncludeNegativeInventory"), aname="_IncludeNegativeInventory", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"OrderByLTD"), aname="_OrderByLTD", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FulfillerID = None
                    self._Catalog = None
                    self._Quantities = None
                    self._LocationNames = None
                    self._Location = None
                    self._Type = None
                    self._Limit = None
                    self._IgnoreSafetyStock = None
                    self._IncludeNegativeInventory = None
                    self._OrderByLTD = None
                    return
            Holder.__name__ = "InventoryRequest_Holder"
            self.pyclass = Holder

    class InventoryResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "InventoryResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.InventoryResponse_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"LocationName"), aname="_LocationName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"CatalogID"), aname="_CatalogID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ManufacturerID"), aname="_ManufacturerID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"OnHand"), aname="_OnHand", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Available"), aname="_Available", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PartNumber"), aname="_PartNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"UPC"), aname="_UPC", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"LTD"), aname="_LTD", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"SafetyStock"), aname="_SafetyStock", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CountryCode"), aname="_CountryCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"Distance"), aname="_Distance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._LocationName = None
                    self._CatalogID = None
                    self._ManufacturerID = None
                    self._OnHand = None
                    self._Available = None
                    self._PartNumber = None
                    self._UPC = None
                    self._LTD = None
                    self._SafetyStock = None
                    self._CountryCode = None
                    self._Distance = None
                    return
            Holder.__name__ = "InventoryResponse_Holder"
            self.pyclass = Holder

    class InventoryRequestType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "InventoryRequestType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ArrayOf_xsd_FulfillerID_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "ArrayOf_xsd_FulfillerID")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOf_xsd_FulfillerID_Def.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname=(ns,"items"), aname="_items", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._items = []
                    return
            Holder.__name__ = "ArrayOf_xsd_FulfillerID_Holder"
            self.pyclass = Holder

    class ArrayOf_impl_ItemQuantity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "ArrayOf_impl_ItemQuantity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOf_impl_ItemQuantity_Def.schema
            TClist = [GTD("http://v4.core.coexprivate.api.shopatron.com","ItemQuantity",lazy=False)(pname=(ns,"items"), aname="_items", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._items = []
                    return
            Holder.__name__ = "ArrayOf_impl_ItemQuantity_Holder"
            self.pyclass = Holder

    class ArrayOf_impl_UpdateItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "ArrayOf_impl_UpdateItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOf_impl_UpdateItem_Def.schema
            TClist = [GTD("http://v4.core.coexprivate.api.shopatron.com","UpdateItem",lazy=False)(pname=(ns,"items"), aname="_items", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._items = []
                    return
            Holder.__name__ = "ArrayOf_impl_UpdateItem_Holder"
            self.pyclass = Holder

    class ArrayOf_impl_Bin_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "ArrayOf_impl_Bin")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOf_impl_Bin_Def.schema
            TClist = [GTD("http://v4.core.coexprivate.api.shopatron.com","Bin",lazy=False)(pname=(ns,"items"), aname="_items", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._items = []
                    return
            Holder.__name__ = "ArrayOf_impl_Bin_Holder"
            self.pyclass = Holder

    class ArrayOf_impl_RefreshItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "ArrayOf_impl_RefreshItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOf_impl_RefreshItem_Def.schema
            TClist = [GTD("http://v4.core.coexprivate.api.shopatron.com","RefreshItem",lazy=False)(pname=(ns,"items"), aname="_items", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._items = []
                    return
            Holder.__name__ = "ArrayOf_impl_RefreshItem_Holder"
            self.pyclass = Holder

    class ArrayOfLocationNames_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "ArrayOfLocationNames")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfLocationNames_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"LocationNames"), aname="_LocationNames", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._LocationNames = []
                    return
            Holder.__name__ = "ArrayOfLocationNames_Holder"
            self.pyclass = Holder

    class UnitType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "UnitType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AdjustItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "AdjustItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AdjustItem_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"PartNumber"), aname="_PartNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"UPC"), aname="_UPC", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"BinID"), aname="_BinID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Quantity"), aname="_Quantity", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._PartNumber = None
                    self._UPC = None
                    self._BinID = None
                    self._Quantity = None
                    return
            Holder.__name__ = "AdjustItem_Holder"
            self.pyclass = Holder

    class ArrayOf_impl_AdjustItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        type = (schema, "ArrayOf_impl_AdjustItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOf_impl_AdjustItem_Def.schema
            TClist = [GTD("http://v4.core.coexprivate.api.shopatron.com","AdjustItem",lazy=False)(pname=(ns,"items"), aname="_items", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._items = []
                    return
            Holder.__name__ = "ArrayOf_impl_AdjustItem_Holder"
            self.pyclass = Holder

    class createFulfiller_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "createFulfiller"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            ns = ns0.createFulfiller_Dec.schema
            TClist = [GTD("http://v4.core.coexprivate.api.shopatron.com","FulfillerRequest",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","createFulfiller")
            kw["aname"] = "_createFulfiller"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "createFulfiller_Holder"
            self.pyclass = Holder

    class createFulfillerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "createFulfillerResponse"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            ns = ns0.createFulfillerResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"createFulfillerReturn"), aname="_createFulfillerReturn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","createFulfillerResponse")
            kw["aname"] = "_createFulfillerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._createFulfillerReturn = None
                    return
            Holder.__name__ = "createFulfillerResponse_Holder"
            self.pyclass = Holder

    class getFulfillerStatus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getFulfillerStatus"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            ns = ns0.getFulfillerStatus_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"fulfillerID"), aname="_fulfillerID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","getFulfillerStatus")
            kw["aname"] = "_getFulfillerStatus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._fulfillerID = None
                    return
            Holder.__name__ = "getFulfillerStatus_Holder"
            self.pyclass = Holder

    class getFulfillerStatusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getFulfillerStatusResponse"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            ns = ns0.getFulfillerStatusResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"getFulfillerStatusReturn"), aname="_getFulfillerStatusReturn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","getFulfillerStatusResponse")
            kw["aname"] = "_getFulfillerStatusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getFulfillerStatusReturn = None
                    return
            Holder.__name__ = "getFulfillerStatusResponse_Holder"
            self.pyclass = Holder

    class getItemLocationsByFulfiller_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getItemLocationsByFulfiller"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            ns = ns0.getItemLocationsByFulfiller_Dec.schema
            TClist = [GTD("http://v4.core.coexprivate.api.shopatron.com","InventorySearchRequest",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","getItemLocationsByFulfiller")
            kw["aname"] = "_getItemLocationsByFulfiller"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getItemLocationsByFulfiller_Holder"
            self.pyclass = Holder

    class getItemLocationsByFulfillerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getItemLocationsByFulfillerResponse"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            ns = ns0.getItemLocationsByFulfillerResponse_Dec.schema
            TClist = [GTD("http://v4.core.coexprivate.api.shopatron.com","InventorySearchResponse",lazy=False)(pname=(ns,"getItemLocationsByFulfillerReturn"), aname="_getItemLocationsByFulfillerReturn", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","getItemLocationsByFulfillerResponse")
            kw["aname"] = "_getItemLocationsByFulfillerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getItemLocationsByFulfillerReturn = []
                    return
            Holder.__name__ = "getItemLocationsByFulfillerResponse_Holder"
            self.pyclass = Holder

    class createFulfillmentLocation_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "createFulfillmentLocation"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            ns = ns0.createFulfillmentLocation_Dec.schema
            TClist = [GTD("http://v4.core.coexprivate.api.shopatron.com","FulfillmentLocation",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","createFulfillmentLocation")
            kw["aname"] = "_createFulfillmentLocation"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "createFulfillmentLocation_Holder"
            self.pyclass = Holder

    class createFulfillmentLocationResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "createFulfillmentLocationResponse"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            ns = ns0.createFulfillmentLocationResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"createFulfillmentLocationReturn"), aname="_createFulfillmentLocationReturn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","createFulfillmentLocationResponse")
            kw["aname"] = "_createFulfillmentLocationResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._createFulfillmentLocationReturn = None
                    return
            Holder.__name__ = "createFulfillmentLocationResponse_Holder"
            self.pyclass = Holder

    class getFulfillmentLocations_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getFulfillmentLocations"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            ns = ns0.getFulfillmentLocations_Dec.schema
            TClist = [GTD("http://v4.core.coexprivate.api.shopatron.com","OrderRequest",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","getFulfillmentLocations")
            kw["aname"] = "_getFulfillmentLocations"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getFulfillmentLocations_Holder"
            self.pyclass = Holder

    class getFulfillmentLocationsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getFulfillmentLocationsResponse"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            ns = ns0.getFulfillmentLocationsResponse_Dec.schema
            TClist = [GTD("http://v4.core.coexprivate.api.shopatron.com","AssignmentResponse",lazy=False)(pname=(ns,"getFulfillmentLocationsReturn"), aname="_getFulfillmentLocationsReturn", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","getFulfillmentLocationsResponse")
            kw["aname"] = "_getFulfillmentLocationsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getFulfillmentLocationsReturn = []
                    return
            Holder.__name__ = "getFulfillmentLocationsResponse_Holder"
            self.pyclass = Holder

    class getFulfillmentLocationTypes_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getFulfillmentLocationTypes"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            ns = ns0.getFulfillmentLocationTypes_Dec.schema
            TClist = []
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","getFulfillmentLocationTypes")
            kw["aname"] = "_getFulfillmentLocationTypes"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "getFulfillmentLocationTypes_Holder"
            self.pyclass = Holder

    class getFulfillmentLocationTypesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getFulfillmentLocationTypesResponse"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            ns = ns0.getFulfillmentLocationTypesResponse_Dec.schema
            TClist = [GTD("http://v4.core.coexprivate.api.shopatron.com","FulfillmentLocationType",lazy=False)(pname=(ns,"getFulfillmentLocationTypesReturn"), aname="_getFulfillmentLocationTypesReturn", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","getFulfillmentLocationTypesResponse")
            kw["aname"] = "_getFulfillmentLocationTypesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getFulfillmentLocationTypesReturn = []
                    return
            Holder.__name__ = "getFulfillmentLocationTypesResponse_Holder"
            self.pyclass = Holder

    class allocateInventory_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "allocateInventory"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            ns = ns0.allocateInventory_Dec.schema
            TClist = [GTD("http://v4.core.coexprivate.api.shopatron.com","UpdateRequest",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","allocateInventory")
            kw["aname"] = "_allocateInventory"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "allocateInventory_Holder"
            self.pyclass = Holder

    class allocateInventoryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "allocateInventoryResponse"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            ns = ns0.allocateInventoryResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","allocateInventoryResponse")
            kw["aname"] = "_allocateInventoryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "allocateInventoryResponse_Holder"
            self.pyclass = Holder

    class deallocateInventory_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deallocateInventory"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            ns = ns0.deallocateInventory_Dec.schema
            TClist = [GTD("http://v4.core.coexprivate.api.shopatron.com","UpdateRequest",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","deallocateInventory")
            kw["aname"] = "_deallocateInventory"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "deallocateInventory_Holder"
            self.pyclass = Holder

    class deallocateInventoryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deallocateInventoryResponse"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            ns = ns0.deallocateInventoryResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","deallocateInventoryResponse")
            kw["aname"] = "_deallocateInventoryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "deallocateInventoryResponse_Holder"
            self.pyclass = Holder

    class fulfillInventory_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "fulfillInventory"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            ns = ns0.fulfillInventory_Dec.schema
            TClist = [GTD("http://v4.core.coexprivate.api.shopatron.com","UpdateRequest",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","fulfillInventory")
            kw["aname"] = "_fulfillInventory"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "fulfillInventory_Holder"
            self.pyclass = Holder

    class fulfillInventoryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "fulfillInventoryResponse"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            ns = ns0.fulfillInventoryResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","fulfillInventoryResponse")
            kw["aname"] = "_fulfillInventoryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "fulfillInventoryResponse_Holder"
            self.pyclass = Holder

    class createBin_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "createBin"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            ns = ns0.createBin_Dec.schema
            TClist = [GTD("http://v4.core.coexprivate.api.shopatron.com","Bin",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","createBin")
            kw["aname"] = "_createBin"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "createBin_Holder"
            self.pyclass = Holder

    class createBinResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "createBinResponse"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            ns = ns0.createBinResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname=(ns,"createBinReturn"), aname="_createBinReturn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","createBinResponse")
            kw["aname"] = "_createBinResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._createBinReturn = None
                    return
            Holder.__name__ = "createBinResponse_Holder"
            self.pyclass = Holder

    class getBins_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getBins"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            ns = ns0.getBins_Dec.schema
            TClist = [GTD("http://v4.core.coexprivate.api.shopatron.com","BinRequest",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","getBins")
            kw["aname"] = "_getBins"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getBins_Holder"
            self.pyclass = Holder

    class getBinsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getBinsResponse"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            ns = ns0.getBinsResponse_Dec.schema
            TClist = [GTD("http://v4.core.coexprivate.api.shopatron.com","BinResponse",lazy=False)(pname=(ns,"getBinsReturn"), aname="_getBinsReturn", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","getBinsResponse")
            kw["aname"] = "_getBinsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getBinsReturn = []
                    return
            Holder.__name__ = "getBinsResponse_Holder"
            self.pyclass = Holder

    class getBinTypes_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getBinTypes"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            ns = ns0.getBinTypes_Dec.schema
            TClist = []
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","getBinTypes")
            kw["aname"] = "_getBinTypes"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "getBinTypes_Holder"
            self.pyclass = Holder

    class getBinTypesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getBinTypesResponse"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            ns = ns0.getBinTypesResponse_Dec.schema
            TClist = [GTD("http://v4.core.coexprivate.api.shopatron.com","BinType",lazy=False)(pname=(ns,"getBinTypesReturn"), aname="_getBinTypesReturn", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","getBinTypesResponse")
            kw["aname"] = "_getBinTypesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getBinTypesReturn = []
                    return
            Holder.__name__ = "getBinTypesResponse_Holder"
            self.pyclass = Holder

    class getBinStatuses_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getBinStatuses"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            ns = ns0.getBinStatuses_Dec.schema
            TClist = []
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","getBinStatuses")
            kw["aname"] = "_getBinStatuses"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "getBinStatuses_Holder"
            self.pyclass = Holder

    class getBinStatusesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getBinStatusesResponse"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            ns = ns0.getBinStatusesResponse_Dec.schema
            TClist = [GTD("http://v4.core.coexprivate.api.shopatron.com","BinStatus",lazy=False)(pname=(ns,"getBinStatusesReturn"), aname="_getBinStatusesReturn", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","getBinStatusesResponse")
            kw["aname"] = "_getBinStatusesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getBinStatusesReturn = []
                    return
            Holder.__name__ = "getBinStatusesResponse_Holder"
            self.pyclass = Holder

    class refreshInventory_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "refreshInventory"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            ns = ns0.refreshInventory_Dec.schema
            TClist = [GTD("http://v4.core.coexprivate.api.shopatron.com","RefreshRequest",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","refreshInventory")
            kw["aname"] = "_refreshInventory"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "refreshInventory_Holder"
            self.pyclass = Holder

    class refreshInventoryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "refreshInventoryResponse"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            ns = ns0.refreshInventoryResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"refreshInventoryReturn"), aname="_refreshInventoryReturn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","refreshInventoryResponse")
            kw["aname"] = "_refreshInventoryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._refreshInventoryReturn = None
                    return
            Holder.__name__ = "refreshInventoryResponse_Holder"
            self.pyclass = Holder

    class getInventory_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getInventory"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            ns = ns0.getInventory_Dec.schema
            TClist = [GTD("http://v4.core.coexprivate.api.shopatron.com","InventoryRequest",lazy=False)(pname=(ns,"request"), aname="_request", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","getInventory")
            kw["aname"] = "_getInventory"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "getInventory_Holder"
            self.pyclass = Holder

    class getInventoryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getInventoryResponse"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            ns = ns0.getInventoryResponse_Dec.schema
            TClist = [GTD("http://v4.core.coexprivate.api.shopatron.com","InventoryResponse",lazy=False)(pname=(ns,"getInventoryReturn"), aname="_getInventoryReturn", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","getInventoryResponse")
            kw["aname"] = "_getInventoryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getInventoryReturn = []
                    return
            Holder.__name__ = "getInventoryResponse_Holder"
            self.pyclass = Holder

    class AdjustRequest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "AdjustRequest"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            ns = ns0.AdjustRequest_Dec.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname=(ns,"FulfillerID"), aname="_FulfillerID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"LocationName"), aname="_LocationName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://v4.core.coexprivate.api.shopatron.com","ArrayOf_impl_AdjustItem",lazy=False)(pname=(ns,"Items"), aname="_Items", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","AdjustRequest")
            kw["aname"] = "_AdjustRequest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FulfillerID = None
                    self._LocationName = None
                    self._Items = None
                    return
            Holder.__name__ = "AdjustRequest_Holder"
            self.pyclass = Holder

    class AdjustResponse_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "AdjustResponse"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","AdjustResponse")
            kw["aname"] = "_AdjustResponse"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_AdjustResponse_immutable_holder"
            ZSI.TC.String.__init__(self, **kw)

    class RefreshRequest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RefreshRequest"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            ns = ns0.RefreshRequest_Dec.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname=(ns,"FulfillerID"), aname="_FulfillerID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"LocationName"), aname="_LocationName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://v4.core.coexprivate.api.shopatron.com","ArrayOf_impl_RefreshItem",lazy=False)(pname=(ns,"Items"), aname="_Items", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","RefreshRequest")
            kw["aname"] = "_RefreshRequest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FulfillerID = None
                    self._LocationName = None
                    self._Items = None
                    return
            Holder.__name__ = "RefreshRequest_Holder"
            self.pyclass = Holder

    class RefreshResponse_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "RefreshResponse"
        schema = "http://v4.core.coexprivate.api.shopatron.com"
        def __init__(self, **kw):
            kw["pname"] = ("http://v4.core.coexprivate.api.shopatron.com","RefreshResponse")
            kw["aname"] = "_RefreshResponse"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_RefreshResponse_immutable_holder"
            ZSI.TC.String.__init__(self, **kw)

# end class ns0 (tns: http://v4.core.coexprivate.api.shopatron.com)
